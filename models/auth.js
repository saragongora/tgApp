// models/auth.js
const nodemailer = require('nodemailer');
const { promisePool } = require('./db');  // Altera√ß√£o na importa√ß√£o

// Configura√ß√£o do transporter de e-mail (substitua com suas credenciais)
const transporter = nodemailer.createTransport({
  service: 'gmail', 
  auth: {
    user: 'acessotgapp@gmail.com',
    pass: '**********'
  }
});

// Gerar c√≥digo aleat√≥rio de 6 d√≠gitos (mantido igual)
function generateCode() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// Verificar se o e-mail √© v√°lido (mantido igual)
function isValidFatecEmail(email) {
  return email.endsWith('@fatec.sp.gov.br');
}

// Enviar c√≥digo por e-mail (atualizado para usar promisePool)
async function sendVerificationCode(email) {
  console.log(`üì® Tentando enviar c√≥digo para: ${email}`);
  
  if (!isValidFatecEmail(email)) {
    console.log('‚ùå E-mail n√£o √© @fatec.sp.gov.br');
    throw new Error('Apenas e-mails @fatec.sp.gov.br s√£o permitidos');
  }

  const codigo = generateCode();
  const expiresAt = new Date(Date.now() + 15 * 60 * 1000);

  console.log(`üîë C√≥digo gerado: ${codigo}`);
  console.log(`‚è≥ Expira em: ${expiresAt}`);

  let connection;
  try {
    connection = await promisePool.getConnection();
    
    // Verifique a conex√£o
    const [ping] = await connection.query('SELECT 1');
    console.log('‚úÖ Teste de conex√£o com o banco:', ping);
    
    console.time('Tempo de inser√ß√£o no banco');
    const [result] = await connection.query(
      'INSERT INTO access_codes (email, codigo, expires_at) VALUES (?, ?, ?)',
      [email, codigo, expiresAt]
    );
    console.timeEnd('Tempo de inser√ß√£o no banco');
    
    console.log('üìù C√≥digo inserido no banco. ID:', result.insertId);

    // Verifique se o c√≥digo realmente foi inserido
    const [check] = await connection.query(
      'SELECT * FROM access_codes WHERE id = ?',
      [result.insertId]
    );
    console.log('üîç Verifica√ß√£o p√≥s-insert:', check[0]);

    const mailOptions = {
      from: 'acessotgapp@gmail.com',
      to: email,
      subject: 'Seu c√≥digo de acesso',
      text: `Seu c√≥digo: ${codigo}\nExpira em 15 minutos.`
    };

    console.time('Tempo de envio de email');
    const info = await transporter.sendMail(mailOptions);
    console.timeEnd('Tempo de envio de email');
    
    return { success: true, codeId: result.insertId };
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico:', error);
    if (error.code) {
      console.error('C√≥digo do erro MySQL:', error.code);
      console.error('SQL State:', error.sqlState);
      console.error('Query:', error.sql);
    }
    throw error;
  } finally {
    if (connection) connection.release();
  }
}

// Verificar c√≥digo (atualizado para usar promisePool)
async function verifyCode(email, codigo) {
  let connection;
  try {
    connection = await promisePool.getConnection();
    
    console.log(`üîç Verificando c√≥digo para ${email}: ${codigo}`);
    console.log('‚è≥ Hora atual no servidor:', new Date());
    
    // Primeiro: Verifique se h√° algum c√≥digo para este email
    const [allCodes] = await connection.query(
      'SELECT id, codigo, expires_at, used FROM access_codes WHERE email = ? ORDER BY expires_at DESC',
      [email]
    );
    console.log('üìã Todos os c√≥digos para este email:', allCodes);
    
    // Depois: Fa√ßa a verifica√ß√£o espec√≠fica
    const [rows] = await connection.query(
      `SELECT id, email, codigo, expires_at, used, 
       NOW() as db_time,
       expires_at > NOW() as is_not_expired
       FROM access_codes 
       WHERE email = ? AND codigo = ? AND used = 0`,
      [email, codigo]
    );
    
    console.log('üîé Resultado da query de verifica√ß√£o:', rows);
    
    if (rows.length === 0) {
      console.log('‚ùå Nenhum c√≥digo v√°lido encontrado. Poss√≠veis causas:');
      console.log('- C√≥digo digitado incorretamente');
      console.log('- C√≥digo j√° foi usado');
      console.log('- C√≥digo expirado');
      console.log('- Problema na inser√ß√£o inicial');
      return false;
    }
    
    if (rows[0].is_not_expired !== 1) {
      console.log('‚åõ C√≥digo expirado!');
      console.log(`‚è≥ Expira√ß√£o: ${rows[0].expires_at}`);
      console.log(`‚è∞ Hora atual no banco: ${rows[0].db_time}`);
    }
    
    await connection.beginTransaction();
    await connection.query(
      'UPDATE access_codes SET used = 1 WHERE id = ?',
      [rows[0].id]
    );
    await connection.commit();
    
    console.log('‚úÖ C√≥digo validado com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
    if (connection) {
      await connection.rollback();
      connection.release();
    }
    throw error;
  } finally {
    if (connection && !connection._freed) connection.release();
  }
}

// Verifica√ß√£o do transporter (mantida igual)
transporter.verify((error, success) => {
  if (error) {
    console.error('‚ùå Erro na configura√ß√£o do nodemailer:', error);
  } else {
    console.log('‚úÖ Servidor de e-mail pronto para enviar mensagens');
  }
});

module.exports = {
  sendVerificationCode,
  verifyCode,
  isValidFatecEmail
};